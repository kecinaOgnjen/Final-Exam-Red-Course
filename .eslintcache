[{"C:\\Development\\Red Course\\final-exam-red-course\\src\\history.js":"1","C:\\Development\\Red Course\\final-exam-red-course\\src\\Page\\HomeScreen.js":"2","C:\\Development\\Red Course\\final-exam-red-course\\src\\index.js":"3","C:\\Development\\Red Course\\final-exam-red-course\\src\\Components\\FolderUpload\\FolderUpload.js":"4","C:\\Development\\Red Course\\final-exam-red-course\\src\\Components\\NewFolder\\NewFolder.js":"5","C:\\Development\\Red Course\\final-exam-red-course\\src\\Components\\Files&Folders\\Row.js":"6","C:\\Development\\Red Course\\final-exam-red-course\\src\\Components\\FileUpload\\FileUpload.js":"7"},{"size":91,"mtime":1609778343281,"results":"8","hashOfConfig":"9"},{"size":8585,"mtime":1609828882903,"results":"10","hashOfConfig":"9"},{"size":245,"mtime":1609329489963,"results":"11","hashOfConfig":"9"},{"size":474,"mtime":1609781833752,"results":"12","hashOfConfig":"9"},{"size":581,"mtime":1609415422072,"results":"13","hashOfConfig":"9"},{"size":3241,"mtime":1609800326614,"results":"14","hashOfConfig":"9"},{"size":1362,"mtime":1609884347727,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"ab89j1",{"filePath":"19","messages":"20","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":2,"source":"21","usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},"C:\\Development\\Red Course\\final-exam-red-course\\src\\history.js",[],["34","35"],"C:\\Development\\Red Course\\final-exam-red-course\\src\\Page\\HomeScreen.js",["36","37","38","39","40"],"import React from 'react';\r\nimport Modal from 'react-modal';\r\nimport '../Style/Style.css';\r\nimport NewFolder from \"../Components/NewFolder/NewFolder\";\r\nimport FileUpload from \"../Components/FileUpload/FileUpload\";\r\nimport FolderUpload from \"../Components/FolderUpload/FolderUpload\";\r\nimport FilesFolders from \"../Components/Files&Folders/Files&Folders\";\r\nimport history from '../history';\r\n\r\nModal.setAppElement = function (s) {\r\n    Modal.setAppElement('#root');\r\n}\r\n\r\nexport default class HomeScreen extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            modalIsOpen:false,\r\n            folderName: '',\r\n            parentFolder: '',\r\n            selectedFolder: undefined,\r\n            items: []\r\n        }\r\n    }\r\n\r\n    showModal = () => {\r\n        this.setState({\r\n            modalIsOpen: true,\r\n        })\r\n    }\r\n\r\n    hideModal =() => {\r\n        this.setState({\r\n            modalIsOpen: false,\r\n            folderName: ''\r\n        })\r\n    }\r\n\r\n    async componentDidMount(){\r\n        await this.getFoldersAndFiles();\r\n\r\n        this.backListener = history.listen(async location => {\r\n            await this.getFoldersAndFiles();\r\n        });\r\n    }\r\n\r\n    async getFoldersAndFiles(){\r\n        let data = this.findInTree();\r\n        if(!data) {\r\n            await this.setState({ items : []});\r\n            return;\r\n        }\r\n\r\n        if(data.type === 'file'){\r\n            await this.setState({ items : [ data]});\r\n        }\r\n        else {\r\n            if(data.children)\r\n                await this.setState({ items : data.children, parentFolder: data.name});\r\n            else \r\n                await this.setState({ items : [], parentFolder: data.name});\r\n        }\r\n    }\r\n\r\n    insertNewFile = async (data) => {\r\n        let tree = JSON.parse(localStorage.getItem('repos'));\r\n        let currentPath = window.location.pathname.split('/');\r\n        currentPath.shift();\r\n\r\n        let newNode = {...data, type: 'file'  };\r\n        let newTree = this.insertTree(currentPath, newNode, tree);\r\n\r\n        await localStorage.setItem('repos', JSON.stringify(newTree));\r\n    }\r\n\r\n    insertNewFolder = async () => {\r\n        let tree = JSON.parse(localStorage.getItem('repos'));\r\n        let newNode = {name : this.state.folderName, type: 'folder', date: new Date, children: [] };\r\n\r\n        if(!tree){\r\n            let newNode2 = {name : '', type: 'folder', date: new Date, children: [newNode] };\r\n            await localStorage.setItem('repos', JSON.stringify(newNode2));\r\n            await this.setState({ items: [newNode]});\r\n        }else {\r\n            let currentPath = window.location.pathname.split('/');\r\n            currentPath.shift();\r\n\r\n            let newTree = this.insertTree(currentPath, newNode, tree);\r\n            await localStorage.setItem('repos', JSON.stringify(newTree));\r\n        }\r\n        \r\n        await this.setState({modalIsOpen: false});\r\n    }\r\n\r\n    insertTree(parentName, newNode, tree){\r\n        let newTree = this.insertRec(parentName, newNode, tree);\r\n        return newTree;\r\n    }\r\n\r\n    insertRec(parentName, newNode, node){\r\n        //insert here\r\n        if(node.name === parentName[0] && parentName.length > 1){\r\n            if(parentName[0]=== '') {\r\n                if(!node.children){\r\n                    node.children = [];\r\n                }\r\n                node.children.push(newNode);\r\n    \r\n                //update state\r\n                let { items } = this.state;\r\n                //this.setState({ items :  [...items, newNode]})\r\n    \r\n                return node\r\n            }\r\n\r\n            parentName.shift();\r\n        }\r\n        else if(node.name === parentName[0]){\r\n            if(!node.children){\r\n                node.children = [];\r\n            }\r\n            node.children.push(newNode);\r\n\r\n            //update state\r\n            let { items } = this.state;\r\n            items.push(newNode);\r\n            this.setState({ items : items})\r\n\r\n            return node\r\n        }\r\n\r\n        if(!node.children){\r\n            return node;\r\n        }\r\n        \r\n        for (let i = 0; i < node.children.length; i++){\r\n                node.children[i] = this.insertRec(parentName,newNode, node.children[i]);\r\n        }\r\n        \r\n        return node\r\n    }\r\n\r\n    findRec(label, node){\r\n        let result = null;\r\n        if(node.name === label) return node;\r\n        \r\n        for (let i = 0; i < node.children.length; i++){\r\n\r\n            if(node.children[i].name == label){\r\n                return node.children[i];\r\n                //node.children[i].name = 'changed';\r\n            }\r\n\r\n            if(node.children[i].children)\r\n                result = this.findRec(label, node.children[i]);\r\n        }\r\n        \r\n        return result;\r\n    }\r\n\r\n    findInTree(){\r\n        let tree = JSON.parse(localStorage.getItem('repos'));\r\n        if(!tree) return null;\r\n\r\n        let currentPath = window.location.pathname.split('/');\r\n        let nodeName = currentPath[currentPath.length - 1];\r\n        currentPath.shift();\r\n        if(nodeName === \"\") return tree;\r\n\r\n        let node = this.findRec(nodeName, tree);\r\n        return node;\r\n    }\r\n\r\n    changeDirectory = (name) => {\r\n        let {pathname} = window.location;\r\n\r\n        if(pathname === '/')\r\n            history.push('/' + name);\r\n        else \r\n            history.push(window.location.pathname + '/' + name);\r\n\r\n        this.getFoldersAndFiles();\r\n    }\r\n\r\n    backDirectory = () => {\r\n        history.goBack();\r\n    }\r\n\r\n    render() {\r\n        return(\r\n          <div className=\"home-screen\">\r\n              <div className=\"border-top-2px-grey\" style={{display: 'flex', marginLeft: 20}}>\r\n                <div style={{flex: 0.5, display:'flex', alignItems: 'center'}}>\r\n                    <span className=\"pointer\" onClick={this.backDirectory}>\r\n                        {this.state.parentFolder != '' && <i style={{color: 'gray'}} className=\"fas fa-arrow-left\"></i>}&nbsp;\r\n                    </span>\r\n                    <span style={{color: 'gray', paddingLeft: 20 }}>\r\n                        {this.state.parentFolder}\r\n                    </span>\r\n                </div>\r\n                <div style={{flex: 0.5}} className=\"d-flex  justify-content-end padding-right-20px\">\r\n                    <NewFolder\r\n                        onClick={this.showModal}\r\n                    />\r\n                    <FileUpload addNewFile={this.insertNewFile}/>\r\n                    <FolderUpload />\r\n                </div>\r\n              </div>\r\n              \r\n              <div className=\" padding-left-20px padding-right-20px\">\r\n                  <FilesFolders items={this.state.items} changeDirectory={this.changeDirectory}/>\r\n                  <Modal\r\n                      isOpen={this.state.modalIsOpen}\r\n                      onRequestClose={this.hideModal}\r\n                      style={{\r\n                          overlay:{\r\n                              backgroundColor: 'rgba(115, 119, 119, 0.75)'\r\n                          },\r\n                          content: {\r\n                              width:'500px',\r\n                              height: '300px',\r\n                              inset:'100px',\r\n                              marginLeft:'25%'\r\n                          }\r\n                      }}\r\n                  >\r\n                      <h2>Dodaj novi Folder</h2>\r\n                      <div style={{display: 'flex', flexDirection: 'column',}}>\r\n                        <div style={{ height: 150, justifyContent: 'center', display: 'flex', alignItems: 'center'}}>\r\n                            <input style={{height: 40, borderRadius: 5, borderColor: 'gray'}} name=\"folderName\" placeholder=\"Naziv\" value={this.state.folderName} onChange={(e) => { this.setState({ folderName: e.currentTarget.value})}}  /> \r\n                        </div>\r\n                        <div style={{display: 'flex', justifyContent: 'center'}}>\r\n                            <button onClick={this.insertNewFolder} style={{padding: 9, width: 90, margin: 10}}>Dodaj</button>\r\n                            <button style={{padding: 9, width: 90, margin: 10}} \r\n                                onClick={() => {\r\n                                    this.setState({ modalIsOpen: false, folderName: ''})\r\n                                }}>\r\n                                Odustani\r\n                            </button>\r\n                        </div>\r\n                      </div>\r\n                      \r\n                  </Modal>\r\n              </div>\r\n          </div>\r\n        );\r\n    }\r\n}",["41","42"],"C:\\Development\\Red Course\\final-exam-red-course\\src\\index.js",[],"C:\\Development\\Red Course\\final-exam-red-course\\src\\Components\\FolderUpload\\FolderUpload.js",["43"],"C:\\Development\\Red Course\\final-exam-red-course\\src\\Components\\NewFolder\\NewFolder.js",["44"],"import React from 'react';\r\n\r\nexport default class NewFolder extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"add-folder d-flex margin-top-15px padding-right-20px\">\r\n                <span\r\n                    className=\"pointer\"\r\n                    onClick={this.props.onClick}\r\n                >\r\n                     <i id=\"add-folder\" className=\"fas fa-folder-plus\"></i>&nbsp;\r\n                    Novi folder\r\n                </span>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","C:\\Development\\Red Course\\final-exam-red-course\\src\\Components\\Files&Folders\\Row.js",["45","46"],"C:\\Development\\Red Course\\final-exam-red-course\\src\\Components\\FileUpload\\FileUpload.js",["47","48","49"],{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":79,"column":76,"nodeType":"56","messageId":"57","endLine":79,"endColumn":84,"fix":"58"},{"ruleId":"54","severity":1,"message":"55","line":82,"column":62,"nodeType":"56","messageId":"57","endLine":82,"endColumn":70,"fix":"59"},{"ruleId":"60","severity":1,"message":"61","line":111,"column":23,"nodeType":"62","messageId":"63","endLine":111,"endColumn":28},{"ruleId":"64","severity":1,"message":"65","line":150,"column":38,"nodeType":"66","messageId":"67","endLine":150,"endColumn":40},{"ruleId":"64","severity":1,"message":"68","line":196,"column":50,"nodeType":"66","messageId":"67","endLine":196,"endColumn":52},{"ruleId":"50","replacedBy":"69"},{"ruleId":"52","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":4,"column":5,"nodeType":"73","messageId":"74","endLine":6,"endColumn":6},{"ruleId":"71","severity":1,"message":"72","line":4,"column":5,"nodeType":"73","messageId":"74","endLine":7,"endColumn":6},{"ruleId":"64","severity":1,"message":"65","line":30,"column":66,"nodeType":"66","messageId":"67","endLine":30,"endColumn":68},{"ruleId":"64","severity":1,"message":"65","line":56,"column":66,"nodeType":"66","messageId":"67","endLine":56,"endColumn":68},{"ruleId":"71","severity":1,"message":"72","line":4,"column":5,"nodeType":"73","messageId":"74","endLine":6,"endColumn":6},{"ruleId":"60","severity":1,"message":"75","line":14,"column":13,"nodeType":"62","messageId":"63","endLine":14,"endColumn":16},{"ruleId":"54","severity":1,"message":"55","line":17,"column":77,"nodeType":"56","messageId":"57","endLine":17,"endColumn":85,"fix":"76"},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],"new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"79","text":"80"},{"range":"81","text":"80"},"no-unused-vars","'items' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.",["77"],["78"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'her' is assigned a value but never used.",{"range":"82","text":"80"},"no-global-assign","no-unsafe-negation",[2331,2331],"()",[2441,2441],[505,505]]